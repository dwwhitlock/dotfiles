#!/bin/bash

# Function to extract lock ID from terraform output and unlock
tf_unlock() {
    echo "Attempting to get lock information..."

    # Run terraform refresh to get lock info, capture both stdout and stderr
    tf_output=$(terraform refresh 2>&1)

    # Check if there's a lock error
    if echo "$tf_output" | grep -q "Error acquiring the state lock"; then
        echo "Lock detected. Extracting lock ID..."

        # Extract the lock ID using grep and sed
        lock_id=$(echo "$tf_output" | grep -A 10 "Lock Info:" | grep "ID:" | sed 's/.*ID:[[:space:]]*\([^[:space:]]*\).*/\1/')

        if [ -n "$lock_id" ]; then
            echo "Found lock ID: $lock_id"
            echo "Attempting to force unlock..."

            # Force unlock using the extracted ID
            terraform force-unlock -force "$lock_id"

            if [ $? -eq 0 ]; then
                echo "‚úÖ Successfully unlocked state!"
                echo "You can now run terraform commands normally."
            else
                echo "‚ùå Failed to unlock state. You may need to manually resolve this."
            fi
        else
            echo "‚ùå Could not extract lock ID from output."
            echo "Lock output:"
            echo "$tf_output"
        fi
    else
        echo "‚úÖ No lock detected. State is available."
    fi
}

# Function to just get the lock ID without unlocking
get_lock_id() {
    echo "Getting lock ID..."

    tf_output=$(terraform refresh 2>&1)

    if echo "$tf_output" | grep -q "Error acquiring the state lock"; then
        lock_id=$(echo "$tf_output" | grep -A 10 "Lock Info:" | grep "ID:" | sed 's/.*ID:[[:space:]]*\([^[:space:]]*\).*/\1/')

        if [ -n "$lock_id" ]; then
            echo "Lock ID: $lock_id"
            return 0
        else
            echo "Could not extract lock ID"
            return 1
        fi
    else
        echo "No lock detected"
        return 1
    fi
}

# Function to unlock multiple workspaces
tf_unlock_workspaces() {
    if [ $# -eq 0 ]; then
        echo "‚ùå No workspaces provided."
        echo "Usage: tf_unlock_workspaces workspace1 workspace2 ..."
        return 1
    fi

    local current_workspace
    current_workspace=$(terraform workspace show 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "‚ùå Could not determine current workspace"
        return 1
    fi

    echo "Current workspace: $current_workspace"
    echo "Processing workspaces: $@"
    echo "=================================="

    local success_count=0
    local fail_count=0
    local processed_workspaces=()

    for workspace in "$@"; do
        echo ""
        echo "üîÑ Processing workspace: $workspace"
        echo "-----------------------------------"

        # Check if workspace exists
        if ! terraform workspace list | grep -q "^[[:space:]]*$workspace$\|^[[:space:]]*\*[[:space:]]*$workspace$"; then
            echo "‚ö†Ô∏è  Workspace '$workspace' does not exist. Skipping..."
            ((fail_count++))
            continue
        fi

        # Switch to workspace
        echo "Switching to workspace: $workspace"
        if terraform workspace select "$workspace" 2>/dev/null; then
            echo "‚úÖ Switched to workspace: $workspace"

            # Try to unlock
            echo "Checking for locks in workspace: $workspace"
            tf_output=$(terraform refresh 2>&1)

            if echo "$tf_output" | grep -q "Error acquiring the state lock"; then
                echo "üîí Lock detected in workspace: $workspace"

                # Extract lock ID
                lock_id=$(echo "$tf_output" | grep -A 10 "Lock Info:" | grep "ID:" | sed 's/.*ID:[[:space:]]*\([^[:space:]]*\).*/\1/')

                if [ -n "$lock_id" ]; then
                    echo "Found lock ID: $lock_id"
                    echo "Attempting to force unlock..."

                    if terraform force-unlock -force "$lock_id"; then
                        echo "‚úÖ Successfully unlocked workspace: $workspace"
                        ((success_count++))
                        processed_workspaces+=("$workspace ‚úÖ")
                    else
                        echo "‚ùå Failed to unlock workspace: $workspace"
                        ((fail_count++))
                        processed_workspaces+=("$workspace ‚ùå")
                    fi
                else
                    echo "‚ùå Could not extract lock ID from workspace: $workspace"
                    ((fail_count++))
                    processed_workspaces+=("$workspace ‚ùå (no lock ID)")
                fi
            else
                echo "‚úÖ No lock detected in workspace: $workspace"
                ((success_count++))
                processed_workspaces+=("$workspace ‚úÖ (no lock)")
            fi
        else
            echo "‚ùå Failed to switch to workspace: $workspace"
            ((fail_count++))
            processed_workspaces+=("$workspace ‚ùå (switch failed)")
        fi
    done

    # Switch back to original workspace
    echo ""
    echo "üîÑ Switching back to original workspace: $current_workspace"
    if terraform workspace select "$current_workspace" 2>/dev/null; then
        echo "‚úÖ Switched back to workspace: $current_workspace"
    else
        echo "‚ùå Failed to switch back to workspace: $current_workspace"
    fi

    # Summary
    echo ""
    echo "=================================="
    echo "üìä SUMMARY"
    echo "=================================="
    echo "Total workspaces processed: $(($success_count + $fail_count))"
    echo "Successful: $success_count"
    echo "Failed: $fail_count"
    echo ""
    echo "Workspace Results:"
    for result in "${processed_workspaces[@]}"; do
        echo "  $result"
    done
    echo "=================================="

    return $fail_count
}

# Function to unlock all workspaces
tf_unlock_all_workspaces() {
    echo "Getting list of all workspaces..."

    # Get all workspaces except default (remove * and whitespace)
    local workspaces
    workspaces=$(terraform workspace list | grep -v "default" | sed 's/[* ]//g' | grep -v "^$")

    if [ -z "$workspaces" ]; then
        echo "No additional workspaces found (only default exists)"
        return 0
    fi

    echo "Found workspaces:"
    echo "$workspaces"
    echo ""

    # Convert to array and call tf_unlock_workspaces
    local workspace_array=($workspaces)
    tf_unlock_workspaces "${workspace_array[@]}"
}

# Main execution
case "${1:-unlock}" in
    "unlock")
        tf_unlock
        ;;
    "unlock-alt")
        tf_unlock_alt
        ;;
    "unlock-alt")
        tf_unlock_alt
        ;;
    "get-id")
        get_lock_id
        ;;
    "unlock-workspaces")
        shift
        tf_unlock_workspaces "$@"
        ;;
    "unlock-all")
        tf_unlock_all_workspaces
        ;;
    *)
        echo "Usage: $0 [unlock|get-id|unlock-workspaces|unlock-all]"
        echo "  unlock              - Extract lock ID and force unlock (default)"
        echo "  get-id              - Just extract and display the lock ID"
        echo "  unlock-workspaces   - Unlock specific workspaces: unlock-workspaces ws1 ws2 ws3"
        echo "  unlock-all          - Unlock all workspaces (except default)"
        echo ""
        echo "Examples:"
        echo "  $0 unlock-workspaces dev staging prod"
        echo "  $0 unlock-all"
        ;;
esac